states_shp %>%
ggplot() +
geom_sf() +
geom_sf(data = NA_shp2018, fill = "darkgreen") +
xlim(-159, -155) +
ylim(19, 23) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_blank(),
plot.title = element_blank())
states_shp %>%
ggplot() +
geom_sf() +
geom_sf(data = NA_shp2018, fill = "darkgreen") +
xlim(-160, -155) +
ylim(19, 23) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_blank(),
plot.title = element_blank())
states_shp %>%
ggplot() +
geom_sf() +
geom_sf(data = NA_shp2018, fill = "darkgreen") +
xlim(-126, -114) +
ylim(32, 42) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_blank(),
plot.title = element_blank())
states_shp %>%
ggplot() +
geom_sf() +
geom_sf(data = NA_shp2018, fill = "darkgreen") +
xlim(-124, -114) +
ylim(32, 42) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_blank(),
plot.title = element_blank())
states_shp %>%
ggplot() +
geom_sf() +
geom_sf(data = NA_shp2018, fill = "darkgreen") +
xlim(-120, -114) +
ylim(32, 42) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_blank(),
plot.title = element_blank())
states_shp %>%
ggplot() +
geom_sf() +
geom_sf(data = NA_shp2018, fill = "darkgreen") +
xlim(-122, -114) +
ylim(32, 42) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_blank(),
plot.title = element_blank())
states_shp %>%
ggplot() +
geom_sf() +
geom_sf(data = NA_shp2018, fill = "darkgreen") +
xlim(-123, -114) +
ylim(32, 42) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_blank(),
plot.title = element_blank())
states_shp %>%
ggplot() +
geom_sf() +
geom_sf(data = NA_shp2018, fill = "darkgreen") +
xlim(-124, -114) +
ylim(32, 42) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_blank(),
plot.title = element_blank())
states_shp %>%
ggplot() +
geom_sf() +
geom_sf(data = NA_shp2018, fill = "darkgreen") +
xlim(-124, -114) +
ylim(33, 42) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_blank(),
plot.title = element_blank())
states_shp %>%
ggplot() +
geom_sf() +
geom_sf(data = NA_shp2018, fill = "darkgreen") +
xlim(-124, -114) +
ylim(34, 42) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_blank(),
plot.title = element_blank())
states_shp %>%
ggplot() +
geom_sf() +
geom_sf(data = NA_shp2018, fill = "darkgreen") +
xlim(-124, -114) +
ylim(33, 41) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_blank(),
plot.title = element_blank())
states_shp %>%
ggplot() +
geom_sf() +
geom_sf(data = NA_shp2018, fill = "darkgreen") +
xlim(-124, -114) +
ylim(33, 42) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_blank(),
plot.title = element_blank())
hawaii <- states_shp %>%
ggplot() +
geom_sf() +
geom_sf(data = NA_shp2018, fill = "darkgreen") +
xlim(-160, -155) +
ylim(19, 23) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_blank(),
plot.title = element_blank())
california <- states_shp %>%
ggplot() +
geom_sf() +
geom_sf(data = NA_shp2018, fill = "darkgreen") +
xlim(-124, -114) +
ylim(33, 42) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_blank(),
plot.title = element_blank())
library("patchwork")
(alaska + continental_usa) / (hawaii + california)
(alaska + continental_usa) / (hawaii + california) +
labs(title = "Native American Lands")
(alaska + continental_usa) / (hawaii + california) +
plot_annotation(title = "Native American Lands")
(alaska + continental_usa) / (hawaii + california) +
plot_annotation(title = "Native American Lands",
subtitle = "30 Day Map Challenge, Day 22: Boundaries",
caption = "Data Source: Census.gov")
(alaska + continental_usa) / (hawaii + california) +
plot_annotation(title = "Native American Lands",
subtitle = "30 Day Map Challenge, Day 22: Boundaries",
caption = "Data Source: Census.gov")
Q <- c(1:5, 4:1)
Q
Q <- c(1:5, 4:2)
Q
rep(Q, 3)
W <- rep(Q, ceil(100/length(Q)))
W <- rep(Q, ceiling(100/length(Q)))
c(1:3, 2:2)
knitr::opts_chunk$set(echo = TRUE)
puzzle_input <- readLines("20171213input.txt")
N <- length(puzzle_input)
?depth
?scanner
depth <- rep(NA, N)
scanner <- rep(NA, N)
df <- data.frame(depth, scanner)
library("tidyverse")
depth <- rep(NA, N)
scanner <- rep(NA, N)
df <- data.frame(depth, scanner)
for(i in 1:N){
scanner_stats <- str_split(puzzle_input, ": ")[[1]]
df$depth[i] <- as.numeric(scanner_stats[1])
x <- as.numeric(scanner_stats[2])
if(x == 2){
df$scanner[i] <- rep(c(1:2), 98/2)
}else{
df$scanner[i] <- rep(c(1:x, (x-1):2), ceiling(98 / (2*x - 2)))
}
}
depth <- rep(NA, N)
scanner <- rep(NA, N)
df <- data.frame(depth, scanner)
for(i in 1:N){
scanner_stats <- str_split(puzzle_input, ": ")[[1]]
df$depth[i] <- as.numeric(scanner_stats[1])
x <- as.numeric(scanner_stats[2])
if(x == 2){
df$scanner[i] <- list(rep(c(1:2), 98/2))[[1]]
}else{
df$scanner[i] <- list(rep(c(1:x, (x-1):2), ceiling(98 / (2*x - 2))))[[1]]
}
}
View(df)
depth <- rep(NA, N)
scanner <- rep(NA, N)
df <- data.frame(depth, scanner)
for(i in 1:N){
scanner_stats <- str_split(puzzle_input, ": ")[[1]]
df$depth[i] <- as.numeric(scanner_stats[1])
x <- as.numeric(scanner_stats[2])
if(x == 2){
df$scanner[i] <- list(rep(c(1:2), 98/2))
}else{
df$scanner[i] <- list(rep(c(1:x, (x-1):2), ceiling(98 / (2*x - 2))))
}
}
depth <- rep(NA, N)
scanner <- rep(NA, N)
df <- data.frame(depth, scanner)
for(i in 1:N){
scanner_stats <- str_split(puzzle_input[i], ": ")[[1]]
df$depth[i] <- as.numeric(scanner_stats[1])
x <- as.numeric(scanner_stats[2])
if(x == 2){
df$scanner[i] <- list(rep(c(1:2), 98/2))
}else{
df$scanner[i] <- list(rep(c(1:x, (x-1):2), ceiling(98 / (2*x - 2))))
}
}
str(df)
df$scanner[10]
df$scanner[10][[1]]
df$scanner[10][[1]][10]
severity <- 0
for(t in 1:98){
if(t %in% df$depth){
if(df$scanner[t][[1]][t] == 1){
severity <- severity + df$depth[t]*max(df$scanner[t][[1]])
}
}
}
puzzle_input <- readLines("20171213input.txt")
N <- length(puzzle_input)
depth <- rep(NA, N)
scanner <- rep(NA, N)
df <- data.frame(depth, scanner)
for(i in 1:N){
scanner_stats <- str_split(puzzle_input[i], ": ")[[1]]
df$depth[i] <- as.numeric(scanner_stats[1])
x <- as.numeric(scanner_stats[2])
if(x == 2){
df$scanner[i] <- list(rep(c(1:2), 98/2))
}else{
df$scanner[i] <- list(rep(c(1:x, (x-1):2), ceiling(98 / (2*x - 2))))
}
}
severity <- 0
for(t in 1:98){
if(t %in% df$depth){
row <- which(df$depth == t, useNames = FALSE)
if(df$scanner[row][[1]][t] == 1){
severity <- severity + df$depth[row]*max(df$scanner[row][[1]])
}
}
}
print(paste("This trip's severity is", severity))
depth <- rep(NA, N)
range <- rep(NA, N)
scanner <- rep(NA, N)
df <- data.frame(depth, range, scanner)
for(i in 1:N){
scanner_stats <- str_split(puzzle_input[i], ": ")[[1]]
df$depth[i] <- as.numeric(scanner_stats[1])
x <- as.numeric(scanner_stats[2])
df$range[i] <- x
if(x == 2){
df$scanner[i] <- list(rep(c(1:2), 98/2))
}else{
df$scanner[i] <- list(rep(c(1:x, (x-1):2), ceiling(98 / (2*x - 2))))
}
}
severity <- 0
for(t in 1:98){
if(t %in% df$depth){
row <- which(df$depth == t, useNames = FALSE)
if(df$scanner[row][[1]][t] == 1){
severity <- severity + df$depth[row]*df$range[row]
}
}
}
print(paste("This trip's severity is", severity))
?which
severity <- 0
for(t in 1:98){
if(t %in% df$depth){
row <- which.max(df$depth == t, useNames = FALSE)
if(df$scanner[row][[1]][t] == 1){
severity <- severity + df$depth[row]*df$range[row]
}
}
}
severity <- 0
for(t in 1:98){
if(t %in% df$depth){
row <- which.max(df$depth == t)
if(df$scanner[row][[1]][t] == 1){
severity <- severity + df$depth[row]*df$range[row]
}
}
}
print(paste("This trip's severity is", severity))
t <- 50
t %in% df$depth
row <- which.max(df$depth == t)
df$scanner[row][[1]]
df$scanner[row][[1]][t]
depth <- rep(NA, N)
range <- rep(NA, N)
scanner <- rep(NA, N)
df <- data.frame(depth, range, scanner)
for(i in 1:N){
scanner_stats <- str_split(puzzle_input[i], ": ")[[1]]
df$depth[i] <- as.numeric(scanner_stats[1])
x <- as.numeric(scanner_stats[2])
df$range[i] <- x
if(x == 2){
df$scanner[i] <- list(rep(c(1:2), 100/2))
}else{
df$scanner[i] <- list(rep(c(1:x, (x-1):2), ceiling(100 / (2*x - 2))))
}
}
severity <- 0
for(t in 1:98){
if(t %in% df$depth){
row <- which.max(df$depth == t)
if(df$scanner[row][[1]][t+1] == 1){
severity <- severity + df$depth[row]*df$range[row]
}
}
}
print(paste("This trip's severity is", severity))
# "2" was incorrect
compute_severity <- function(this_offset){
severity <- 0
for(t in 1:98){
if(t %in% df$depth){
row <- which.max(df$depth == t)
if(df$scanner[row][[1]][t + 1 + this_offset] == 1){
severity <- severity + df$depth[row]*df$range[row]
}
}
}
severity #return
}
compute_severity(0)
wait_time <- 0
for(T in 1:1000){
if(compute_severity(T) == 0){
wait_time <- T
break
}
}
?whereabouts
compute_severity <- function(this_offset){
severity <- 0
for(t in 1:98){
if(t %in% df$depth){
row <- which.max(df$depth == t)
n <- df$range[row]
whereabouts <- (t + 1 + this_offset) %% n
if(whereabouts == 0) { whereabouts <- n }
if(df$scanner[row][[1]][whereabouts] == 1){
severity <- severity + df$depth[row]*df$range[row]
}
}
}
severity #return
}
compute_severity(0)
compute_severity <- function(this_offset){
severity <- 0
for(t in 1:98){
if(t %in% df$depth){
row <- which.max(df$depth == t)
n <- df$range[row]
whereabouts <- (t + this_offset) %% n
if(whereabouts == 0) { whereabouts <- n }
if(df$scanner[row][[1]][whereabouts] == 1){
severity <- severity + df$depth[row]*df$range[row]
}
}
}
severity #return
}
compute_severity(0)
compute_severity <- function(this_offset){
severity <- 0
for(t in 1:98){
if(t %in% df$depth){
row <- which.max(df$depth == t)
n <- df$range[row]
whereabouts <- (t + 1 + this_offset) %% (2*n - 2)
if(whereabouts == 0) { whereabouts <- 2*n - 2 }
if(df$scanner[row][[1]][whereabouts] == 1){
severity <- severity + df$depth[row]*df$range[row]
}
}
}
severity #return
}
compute_severity(0)
wait_time <- 0
for(T in 1:1000){
if(compute_severity(T) == 0){
wait_time <- T
break
}
}
print(paste("We need to wait", wait_time, "picoseconds"))
wait_time <- 0
for(T in 1:10000){
if(compute_severity(T) == 0){
wait_time <- T
break
}
}
print(paste("We need to wait", wait_time, "picoseconds"))
t1 <- proc.time()
wait_time <- 0
for(T in 1:1e6){
if(compute_severity(T) == 0){
wait_time <- T
break
}
}
print(paste("We need to wait", wait_time, "picoseconds"))
t2 <- proc.time()
t2 - t1
compute_severity(97048)
compute_severity(97049)
compute_severity(97047)
compute_severity(0)
compute_severity(1)
compute_severity(2)
compute_severity(3)
compute_severity(4)
compute_severity(5)
